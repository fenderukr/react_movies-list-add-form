{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","trim","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","newMovieObj","setNewMovieObj","getFieldValue","prevState","isDisabled","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a7e673e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && (!value.trim());\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\nexport type AddMovieFunction = (movie: Movie) => void;\n\nexport const NewMovie = ({ onAdd }: { onAdd: AddMovieFunction }) => {\n  const [count, setCount] = useState(0);\n  const [newMovieObj, setNewMovieObj] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const getFieldValue = (name: string) => (value: string) => {\n    setNewMovieObj((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const isDisabled = !newMovieObj.imdbId.trim()\n          || !newMovieObj.imdbUrl.trim()\n          || !newMovieObj.imgUrl.trim()\n          || !newMovieObj.title.trim();\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd(newMovieObj);\n    setNewMovieObj({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n\n    setCount(count + 1);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovieObj.title}\n        onChange={getFieldValue('title')}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovieObj.description}\n        onChange={getFieldValue('description')}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovieObj.imgUrl}\n        onChange={getFieldValue('imgUrl')}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovieObj.imdbUrl}\n        onChange={getFieldValue('imdbUrl')}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovieObj.imdbId}\n        onChange={getFieldValue('imdbId')}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            disabled={isDisabled}\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovieToArr = (movie: Movie) => {\n    setMovies(\n      (prevState) => [...prevState, movie],\n    );\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovieToArr}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}